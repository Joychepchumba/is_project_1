import 'package:flutter/material.dart';
import 'package:cached_network_image/cached_network_image.dart';
import 'package:is_project_1/models/legal_tips_models.dart';
import 'package:flutter/material.dart';
import 'package:timeago/timeago.dart' as timeago;
import 'dart:convert';
import 'dart:typed_data';

class LegalTipDetailPage extends StatelessWidget {
  final LegalTip tip;

  LegalTipDetailPage({required this.tip});

  // Enhanced base64 validation
  bool isBase64(String str) {
    try {
      if (str.isEmpty) return false;
      
      // Remove data URI prefix if present
      String base64String = str;
      if (str.contains(',')) {
        base64String = str.split(',').last;
      }
      
      // Check if it's a valid base64 string
      if (base64String.isEmpty) return false;
      
      // Basic base64 format validation
      final base64RegExp = RegExp(r'^[A-Za-z0-9+/]*={0,2}$');
      if (!base64RegExp.hasMatch(base64String)) return false;
      
      // Try to decode
      base64Decode(base64String);
      return true;
    } catch (e) {
      print('Base64 validation error: $e');
      return false;
    }
  }

  // Get clean base64 data
  String getBase64Data(String base64String) {
    if (base64String.contains(',')) {
      return base64String.split(',').last;
    }
    return base64String;
  }

  // Enhanced URL validation
  bool isValidUrl(String url) {
    try {
      if (url.isEmpty) return false;
      
      Uri uri = Uri.parse(url);
      return uri.hasScheme && 
             (uri.scheme == 'http' || uri.scheme == 'https') &&
             uri.host.isNotEmpty;
    } catch (e) {
      print('URL validation error: $e');
      return false;
    }
  }

  // Check if string is a local file path
  bool isLocalFilePath(String path) {
    return path.startsWith('/uploads/') || 
           path.startsWith('uploads/') ||
           path.contains('/uploads/');
  }

  // Convert local file path to full URL
  String buildFullImageUrl(String imagePath) {
    // Replace with your actual server base URL
    const String baseUrl = 'https://d2cb-41-90-178-146.ngrok-free.app'; // UPDATE THIS!
    
    if (imagePath.startsWith('/')) {
      return '$baseUrl$imagePath';
    } else {
      return '$baseUrl/$imagePath';
    }
  }

  // Check if string looks like a data URI
  bool isDataUri(String str) {
    return str.startsWith('data:image/') && str.contains(';base64,');
  }

  Widget _buildImageWidget() {
    print('=== IMAGE DEBUG INFO ===');
    print('Image URL: ${tip.imageUrl}');
    print('Image URL length: ${tip.imageUrl?.length ?? 0}');
    print('Image URL type: ${tip.imageUrl.runtimeType}');
    
    if (tip.imageUrl == null || tip.imageUrl!.isEmpty) {
      print('No image URL provided');
      return _buildPlaceholderImage();
    }

    final imageUrl = tip.imageUrl!.trim();
    print('Trimmed image URL: ${imageUrl.substring(0, imageUrl.length > 100 ? 100 : imageUrl.length)}...');

    // Check if it's a local file path and convert to full URL
    if (isLocalFilePath(imageUrl)) {
      print('Detected local file path - converting to full URL');
      final fullUrl = buildFullImageUrl(imageUrl);
      print('Full URL: $fullUrl');
      
      return CachedNetworkImage(
        imageUrl: fullUrl,
        fit: BoxFit.cover,
        width: double.infinity,
        height: 250,
        placeholder: (context, url) => Container(
          color: Colors.grey.shade200,
          child: const Center(
            child: CircularProgressIndicator(),
          ),
        ),
        errorWidget: (context, url, error) {
          print('CachedNetworkImage error: $error');
          print('Failed URL: $url');
          return _buildPlaceholderImage();
        },
      );
    }

    // Check if it's a data URI (data:image/...;base64,...)
    if (isDataUri(imageUrl)) {
      print('Detected data URI format');
      try {
        Uint8List imageBytes = base64Decode(getBase64Data(imageUrl));
        print('Successfully decoded base64 data, bytes length: ${imageBytes.length}');
        
        return ClipRRect(
          borderRadius: BorderRadius.circular(0),
          child: Image.memory(
            imageBytes,
            fit: BoxFit.cover,
            width: double.infinity,
            height: 250,
            errorBuilder: (context, error, stackTrace) {
              print('Image.memory error: $error');
              print('Stack trace: $stackTrace');
              return _buildPlaceholderImage();
            },
          ),
        );
      } catch (e) {
        print('Data URI decode error: $e');
        return _buildPlaceholderImage();
      }
    }
    
    // Check if it's base64 without data URI prefix
    if (isBase64(imageUrl)) {
      print('Detected base64 format');
      try {
        Uint8List imageBytes = base64Decode(getBase64Data(imageUrl));
        print('Successfully decoded base64 data, bytes length: ${imageBytes.length}');
        
        return ClipRRect(
          borderRadius: BorderRadius.circular(0),
          child: Image.memory(
            imageBytes,
            fit: BoxFit.cover,
            width: double.infinity,
            height: 250,
            errorBuilder: (context, error, stackTrace) {
              print('Image.memory error: $error');
              print('Stack trace: $stackTrace');
              return _buildPlaceholderImage();
            },
          ),
        );
      } catch (e) {
        print('Base64 decode error: $e');
        return _buildPlaceholderImage();
      }
    }
    
    // Check if it's a valid URL
    if (isValidUrl(imageUrl)) {
      print('Detected valid URL format');
      return CachedNetworkImage(
        imageUrl: imageUrl,
        fit: BoxFit.cover,
        width: double.infinity,
        height: 250,
        placeholder: (context, url) => Container(
          color: Colors.grey.shade200,
          child: const Center(
            child: CircularProgressIndicator(),
          ),
        ),
        errorWidget: (context, url, error) {
          print('CachedNetworkImage error: $error');
          print('Failed URL: $url');
          return _buildPlaceholderImage();
        },
      );
    }
    
    // If nothing matches, show placeholder
    print('Image format not recognized - showing placeholder');
    return _buildPlaceholderImage();
  }

  Widget _buildPlaceholderImage() {
    return Container(
      width: double.infinity,
      height: 250,
      decoration: BoxDecoration(
        color: Colors.blue.shade50,
        border: Border.all(color: Colors.blue.shade200, width: 1),
      ),
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Icon(
            Icons.lightbulb_outline,
            color: Colors.blue.shade400,
            size: 60,
          ),
          const SizedBox(height: 8),
          Text(
            'Legal Tip',
            style: TextStyle(
              color: Colors.blue.shade600,
              fontSize: 16,
              fontWeight: FontWeight.w500,
            ),
          ),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text(
          'Legal Tip',
          style: TextStyle(color: Colors.black87, fontWeight: FontWeight.bold),
        ),
        backgroundColor: Colors.white,
        elevation: 0,
        leading: IconButton(
          icon: const Icon(Icons.arrow_back, color: Colors.black87),
          onPressed: () => Navigator.pop(context),
        ),
        actions: [
          IconButton(
            icon: const Icon(Icons.share, color: Colors.black87),
            onPressed: () {
              // Implement share functionality
            },
          ),
        ],
      ),
      body: SingleChildScrollView(
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // Hero Image with enhanced error handling
            _buildImageWidget(),

            // Content
            Padding(
              padding: const EdgeInsets.all(20),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  // Title
                  Text(
                    tip.title,
                    style: const TextStyle(
                      fontSize: 24,
                      fontWeight: FontWeight.bold,
                      color: Colors.black87,
                      height: 1.3,
                    ),
                  ),
                  const SizedBox(height: 16),

                  // Provider and Date Info
                  Container(
                    padding: const EdgeInsets.all(16),
                    decoration: BoxDecoration(
                      color: Colors.grey.shade50,
                      borderRadius: BorderRadius.circular(12),
                      border: Border.all(color: Colors.grey.shade200),
                    ),
                    child: Row(
                      children: [
                        Icon(
                          Icons.person,
                          color: Colors.grey.shade600,
                          size: 20,
                        ),
                        const SizedBox(width: 8),
                        Expanded(
                          child: Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              Text(
                                tip.legalAidProvider?.fullName ?? 'Legal Provider',
                                style: const TextStyle(
                                  fontSize: 16,
                                  fontWeight: FontWeight.w600,
                                  color: Colors.black87,
                                ),
                              ),
                              const SizedBox(height: 2),
                              Text(
                                'Published ${timeago.format(tip.publishedAt ?? tip.createdAt)}',
                                style: TextStyle(
                                  fontSize: 14,
                                  color: Colors.grey.shade600,
                                ),
                              ),
                            ],
                          ),
                        ),
                      ],
                    ),
                  ),
                  const SizedBox(height: 24),

                  // Description
                  Text(
                    'Description',
                    style: const TextStyle(
                      fontSize: 18,
                      fontWeight: FontWeight.bold,
                      color: Colors.black87,
                    ),
                  ),
                  const SizedBox(height: 12),
                  Text(
                    tip.description,
                    style: const TextStyle(
                      fontSize: 16,
                      color: Colors.black87,
                      height: 1.6,
                    ),
                  ),
                  const SizedBox(height: 32),

                  ]  // Enhanced Debug info (remove in production)
                  
                  
              ),
            ),
          ],
        ),
      ),
    );
  }
}